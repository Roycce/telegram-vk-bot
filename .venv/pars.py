import asyncio
import json
import logging
import os

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, URLInputFile
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
ACCESS_TOKEN = os.getenv("VK_ACCESS_TOKEN")
OWNER_ID = os.getenv("VK_OWNER_ID")
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([ACCESS_TOKEN, OWNER_ID, TG_TOKEN, CHAT_ID]):
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

bot = Bot(token=TG_TOKEN)
dp = Dispatcher()


def load_last_post_id():
    try:
        with open("last_post_id.json", "r") as file:
            data = json.load(file)
            return data.get("last_post_id")
    except FileNotFoundError:
        return None


def save_last_post_id(last_post_id):
    with open("last_post_id.json", "w") as file:
        json.dump({"last_post_id": last_post_id}, file)

last_post_id = load_last_post_id()

async def send_to_telegram(message, image_url=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        if image_url:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram: {image_url}")
            photo = URLInputFile(image_url)
            await bot.send_photo(
                chat_id=CHAT_ID,
                photo=photo,
                caption=message
            )
        else:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {message}")
            await bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


async def check_new_posts():
    global last_post_id

    url = "https://api.vk.com/method/wall.get"
    params = {
        "access_token": ACCESS_TOKEN,
        "owner_id": OWNER_ID,
        "filter": "all",
        "count": 5,
        "v": "5.131"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                data = await response.json()
                logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç VK API: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

                if 'response' not in data:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ VK API: {data}")
                    return

                for item in data['response'].get('items', []):
                    if "üîî" in item['text']:
                        if last_post_id is None or item['id'] > last_post_id:
                            for attachment in item.get('attachments', []):
                                if attachment['type'] == 'photo':
                                    photo_sizes = attachment['photo']['sizes']
                                    best_size = max(
                                        photo_sizes,
                                        key=lambda x: x['width'] * x['height']
                                    )
                                    photo_url = best_size['url']

                                    message = f"{item['text']}"
                                    await send_to_telegram(message, photo_url)

                            last_post_id = item['id']
                            save_last_post_id(last_post_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π last_post_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")

async def monitor_posts():
    while True:
        await check_new_posts()
        print("–ñ–¥—ë–º –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
        await asyncio.sleep(60)

@dp.message(Command("start"))
async def on_start(msg: Message):
    await msg.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        asyncio.create_task(monitor_posts())
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    asyncio.run(main())